---
title: "Viable Approach for ICN 2025"
authors: Ava, Edward, Christina, Tovi
format: html
output: revealjs: default
---

# Abstract

In neuroscience, a lot of literature and studies have been based on linking neural activity with specific stimuli. Examples include neurons in area IT that show consistent responses to faces, or neurons in area V1 that have extreme specificity when it comes to orientation. However, there is the question that arises naturally from this–is neural activity (that has been shown to be quite accurate when discerning and responding to specific stimuli) map directly onto predicting an organism’s behavior? In other words, does an organism have conscious access to all the information it computes? Our project aims to answer this question using electrocorticographic data from Miller’s lab that contains data from an experiment where human subjects were presented with face/house images and were required to press a button when they perceived the object to be a face. Thus, this data is rich in allowing us to compare behavioral data with neural activity; we hypothesize that the neural activity that was recorded is an effective measure/predictor of behavior (in this case, a subject’s identification of a face). However, if we find that there is flexibility in the relation between activity and perception, there is a lot of neuroscience literature that we’ve gathered that suggests that there might be an evolutionary advantage to having flexibility in behavior even though neural activity is highly accurate.

```{python}
import os, requests

fname = 'faceshouses.npz'
url = "https://osf.io/argh7/download"

if not os.path.isfile(fname):
  try:
    r = requests.get(url)
  except requests.ConnectionError:
    print("!!! Failed to download data !!!")
  else:
    if r.status_code != requests.codes.ok:
      print("!!! Failed to download data !!!")
    else:
      with open(fname, "wb") as fid:
        fid.write(r.content)
```

# Installing packages nilearn and nimare and import matplotlib as well as packages to visualize brains and electrode locations

```{python}
from matplotlib import rcParams
from matplotlib import pyplot as plt

import nilearn
# import nimare # currently having issues importing this, but visualization of electrode locations is interesting but not necessary for data analysis. 

rcParams['figure.figsize'] = [20, 4]
rcParams['font.size'] = 15
rcParams['axes.spines.top'] = False
rcParams['axes.spines.right'] = False
rcParams['figure.autolayout'] = True
```

# Data loading
```{python}
import numpy as np

alldat = np.load(fname, allow_pickle=True)['dat']

# select just one of the recordings here.
dat1 = alldat[1][0]
dat2 = alldat[1][1]

print(exp1_allpat.shape)
print(dat1.keys())
print(dat2.keys())
```

# Accessing broadband power in time-varying windows
```{python}
from scipy import signal

V = dat1['V'].astype('float32')

b, a = signal.butter(3, [50], btype='high', fs=1000)
V = signal.filtfilt(b, a, V, 0)
V = np.abs(V)**2
b, a = signal.butter(3, [10], btype='low', fs=1000)
V = signal.filtfilt(b, a, V, 0)

V = V/V.mean(0)
```

# Averaging the broadband power across all face stimuli and across all house stimuli
```{python}
nt, nchan = V.shape
nstim = len(dat1['t_on'])

trange = np.arange(-200, 400)
ts = dat1['t_on'][:, np.newaxis] + trange
V_epochs = np.reshape(V[ts, :], (nstim, 600, nchan))

V_house = (V_epochs[dat1['stim_id'] <= 50]).mean(0)
V_face = (V_epochs[dat1['stim_id'] > 50]).mean(0)
```

# Finding the electrodes that distinguish faces from houses
```{python}
from scipy import signal
from nilearn import plotting

plt.figure(figsize=(20, 10))
for j in range(50):
  ax = plt.subplot(5, 10, j+1)
  plt.plot(trange, V_house[:, j], color='orange', label='House')
  plt.plot(trange, V_face[:, j], color='blue', label='Face') # blue is the face response
  plt.title('ch%d'%j)
  plt.xticks([-200, 0, 200])
  plt.ylim([0, 4])
plt.show()
```

# Ok new datatypes
```{python}
# note, we are using power as a measure of response bc power is voltage squared, and this means we don't have to worry about negative values messing with things...

@dataclass
class PowerResponse:
    id: str # can be 'face' or 'house'
    power: np.ndarray # the max power of that trial 

@dataclass
class BehaviorResponse:
    patient: int # patient ID (0–6)
    id: str # can be 'face' or 'house' denotes the actual stimulus id
    power: float # the max power of that trial
    behav: int # 1 if face was identified, 0 otherwise
```

# Writing Functions For Exp1 (Task 1)

```{python}
def create_patient_power_responses(patient: int, channel: int, 
                                     database: np.ndarray) -> list[PowerResponse]:
    """
    Takes in a patient number, a channel number, and the database, and returns a list of PowerResponse objects for that specific patient and experiment 1 data.
    """
    exp1_data = database[patient][0]  # Get exp1 data for the specified patient
    voltage_data = exp1_data['V'].T[channel] # voltage data from the correct channel
    power_data = convert_to_power(voltage_data) # function that converts the noisy voltage data to power data

    power_responses = make_list_powerresponses(
        power_data,  # power data from the correct channel. 
        exp1_data['t_on'],    # start times (indices)
        exp1_data['t_off'],   # stop times (indices)
        exp1_data['stim_id']  # stimulus ids
    )

    return power_responses

def convert_to_power(voltage_data: np.ndarray) -> np.ndarray:
    """Converts continuous voltage data into a continuous array of power data.
    Applies high-pass and low-pass filtering and normalizes across time."""
    voltage_thirty_two_bit = voltage_data.astype('float32')  # Convert to 32-bit floats
    b, a = signal.butter(3, [50], btype='high', fs=1000)
    V_high_passed = signal.filtfilt(b, a, voltage_thirty_two_bit, 0)
    power_high_passed = np.abs(V_high_passed)**2
    b, a = signal.butter(3, [10], btype='low', fs=1000)
    power_hi_lo_passed = signal.filtfilt(b, a, power_high_passed, 0)
    power_hi_lo_passed_norm = power_hi_lo_passed / power_hi_lo_passed.mean(0)
    return power_hi_lo_passed_norm

PRE_STIM_TIME = 200 # amount of pre-samples we use before t_on to include in our analysis
def make_list_powerresponses(power_data: np.ndarray, stim_start: np.ndarray, stim_stop: np.ndarray, stim_ids: np.ndarray) -> list[PowerResponse]:
    """
    Extracts power responses for each stimulus trial and returns them as a list of PowerResponse objects. A max power is reported in the power field of the PowerResponse datatype. 
    """
    responses = []
    for start, stop, stim_id in zip(stim_start - PRE_STIM_TIME, stim_stop, stim_ids):
      max_power = max(power_data[start:stop])
      stim_type = "house" if 1 <= stim_id <= 50 else "face"
      responses.append(PowerResponse(id=stim_type, power=max_power))

    return responses
```

# seeing if my functions be making sense
```{python}
# testing it all out
pat1_resp = create_patient_power_responses(patient=0, channel=35, database=alldat)
print(pat1_resp)

pat1_faceresp = list(filter(lambda x: x.id == 'face', pat1_resp))
print(pat1_faceresp)
pat1_houseresp = list(filter(lambda x: x.id == 'house', pat1_resp))
print(pat1_houseresp)

pat1_face_data = list(map(lambda x: x.power, pat1_faceresp))
pat1_house_data = list(map(lambda x: x.power, pat1_houseresp))

pat1_face_mean = np.mean(pat1_face_data)
pat1_house_mean = np.mean(pat1_house_data)
print(pat1_face_mean, pat1_house_mean)

data = pat1_face_data + pat1_house_data
labels = ['face'] * len(pat1_face_data) + ['house'] * len(pat1_house_data)
sns.violinplot(x=labels, y=data)
plt.title('Distribution of Power Responses for Face and House Stimuli')
plt.xlabel('Stimulus Type')
plt.ylabel('Power Response (V^2)')
plt.show()
```

# hello actually plotting stuff now:
```{python}
pat0_resp = create_patient_power_responses(0, 35, alldat)
pat1_resp = create_patient_power_responses(1, 46, alldat)
pat2_resp = create_patient_power_responses(2, 35, alldat)
pat3_resp = create_patient_power_responses(3, 23, alldat)
pat4_resp = create_patient_power_responses(4, 15, alldat)
pat5_resp = create_patient_power_responses(5, 30, alldat)
pat6_resp = create_patient_power_responses(6, 38, alldat)

total_responses = pat0_resp + pat1_resp + pat2_resp + pat3_resp + pat4_resp + pat5_resp + pat6_resp

def make_violin_plot(responses: list[PowerResponse]) -> None:
    # Extract scalar power values and corresponding labels
    data = []
    labels = []
    for resp in responses:
        data.append(resp.power)
        labels.append(resp.id)  # 'face' or 'house'

    df = pd.DataFrame({'Stimulus Type': labels, 'Power Response': data})

    # Create the violin plot
    sns.violinplot(x='Stimulus Type', y='Power Response', data=df)
    plt.title('Distribution of Power Responses for Face and House Stimuli')
    plt.xlabel('Stimulus Type')
    plt.ylabel('Power Response (V²)')
    plt.show()

make_violin_plot(total_responses)

# Now we report the average mean power responses from the face trials vs the the house trials: 
total_faces = list(filter(lambda x: x.id == 'face', total_responses))
total_houses = list(filter(lambda x: x.id == 'house', total_responses))

mean_faces = np.mean(list(map(lambda x: x.power, total_faces)))
mean_houses = np.mean(list(map(lambda x: x.power, total_houses)))

print(mean_faces, mean_houses)
```

# Working with experiment #2 (Task 2) --still in progress
```{python}
def create_patient_behavior_responses(patient: int, channel: int, 
                                     database: np.ndarray) -> list[BehaviorResponse]:
    """
    Takes in a patient number, a channel number, and the database, and returns a list of BehaviorResponse objects for that specific patient and experiment 2 data.
    """
    exp2_data = database[patient][1]  # Get exp2 data for the specified patient
    voltage_data = exp2_data['V'].T[channel] # voltage data from the correct channel
    power_data = convert_to_power(voltage_data) # function that converts the noisy voltage data to power data

    behavior_responses = make_list_behaviorresponses(
        patient, # feed in the patient index data to this func
        power_data,  # power data from the correct channel. 
        exp2_data['t_on'],    # start times (indices)
        exp2_data['t_off'],   # stop times (indices)
        exp2_data['key_press'], # times when the subject thought the image was a face
        exp2_data['stim_cat']  # stimulus ids
    )

    return behavior_responses

def make_list_behaviorresponses(patient: int, power_data: np.ndarray, stim_start: np.ndarray, stim_stop: np.ndarray, key_presses: np.ndarray, stim_cats: np.ndarray, ) -> list[PowerResponse]:
    """
    Extracts behavior responses for each stimulus trial and returns them as a list of BehaviorResponse objects. A max power is reported in the power field of the Behavior datatype. 
    """
    responses = []
    for start, stop, stim_cat, key_press in zip(stim_start, stim_stop, stim_cats, key_presses):
      max_power = max(power_data[start:stop])
      stim_type = "face" if 2 == stim_cat else "house"
      face_resp = 1 if start <= key_press <= stop else 0
      responses.append(
        BehaviorResponse(
        patient=patient, 
        id=stim_type, 
        power=max_power, 
        behav=face_resp))

    return responses

def convert_to_power(voltage_data: np.ndarray) -> np.ndarray:
    """ Converts continuous voltage data into a continuous array of power data.
    Applies high-pass and low-pass filtering and normalizes across time."""
    voltage_thirty_two_bit = voltage_data.astype('float32')  # Convert to 32-bit floats
    b, a = signal.butter(3, [50], btype='high', fs=1000)
    V_high_passed = signal.filtfilt(b, a, voltage_thirty_two_bit, 0)
    power_high_passed = np.abs(V_high_passed)**2
    b, a = signal.butter(3, [10], btype='low', fs=1000)
    power_hi_lo_passed = signal.filtfilt(b, a, power_high_passed, 0)
    power_hi_lo_passed_norm = power_hi_lo_passed / power_hi_lo_passed.mean(0)
    return power_hi_lo_passed_norm
```

# testing exp2 functions
```{python}
from sklearn.linear_model import LogisticRegression

pat0_resp = create_patient_behavior_responses(0, 35, alldat)
pat1_resp = create_patient_behavior_responses(1, 46, alldat)
pat2_resp = create_patient_behavior_responses(2, 35, alldat)
pat3_resp = create_patient_behavior_responses(3, 23, alldat)
pat4_resp = create_patient_behavior_responses(4, 15, alldat)
pat5_resp = create_patient_behavior_responses(5, 30, alldat)
pat6_resp = create_patient_behavior_responses(6, 38, alldat)

total_behav_responses = pat0_resp + pat1_resp + pat2_resp + pat3_resp + pat4_resp + pat5_resp + pat6_resp

print(total_behav_responses)


# power_responses = [response.power for response in total_behav_responses]
# behav_responses = [response.behav for response in total_behav_responses]

# # Create a DataFrame
# df = pd.DataFrame({
#     'power': power_responses,
#     'identified_face': behav_responses
# })

# model = LogisticRegression()
# model.fit(df[['power']], df['identified_face'])

# # Generate a range of power values for plotting
# power_range = np.linspace(df['power'].min(), df['power'].max(), 300).reshape(-1, 1)

# # Predict probabilities using the logistic regression model
# predicted_probs = model.predict_proba(power_range)[:, 1]

# # Plot the logistic regression curve
# plt.figure(figsize=(8, 6))
# sns.regplot(x='power', y='identified_face', data=df, logistic=True, ci=None, scatter_kws={'s': 10})
# plt.xlabel('Power Response')
# plt.ylabel('Probability of Identifying Face')
# plt.title('Logistic Regression: Power Response vs Face Identification')
# plt.show()
```